pipeline {
  agent {
    docker { image 'liquibase/liquibase:latest' }
  }
  stages {
  stage('status') {
    steps {
           sh 'liquibase status --changeLogFile=db.changelog-master.xml'
    }  
  } 
  

  stage('update') {
    when {
        expression {
            return env.ACTION == 'update';
        }
    }
    steps {
           sh 'liquibase update --changeLogFile=db.changelog-master.xml'
    }  
    
  stage('tag') {
    when {
        expression {
            return env.ACTION == 'update';
        }
    }
    steps {
             sh 'liquibase tag ${BUILD_NUMBER}'
    }
  } 


}

  stage('rollback') {
    when {
        expression {
            return env.ACTION == 'rollback';
        }
    }
    steps {
           sh '''
              VERSION=$(echo ${VERSION} | sed s/,//g) 
              echo "VERSION: ${VERSION}"
              liquibase  --changeLogFile=db.changelog-master.xml rollback ${VERSION}
           '''
    }  
    
} 
  }
  post {
    always {
      cleanWs()
    }
  }

}
